{"version":3,"sources":["components/header/header.component.jsx","components/heading/heading.component.jsx","components/About/about.commponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Heading","first","second","styles","style","About","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAEaA,G,6BAAS,kBACpB,yBAAKC,UAAU,yDACb,uBAAGA,UAAU,eAAeC,KAAK,MAAjC,QAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,iCAAiCQ,GAAG,aACjD,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,QACO,0BAAMD,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,UAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,YAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,YAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,MAA7B,iBCvCGQ,G,MAAU,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,OACpC,OACE,yBAAKJ,GAAG,OAAOK,MAAOD,GACpB,4BAAKF,GACL,4BAAKC,MCHEG,G,MAAQ,WACnB,OACE,yBAAKN,GAAG,QAAQR,UAAU,aACxB,wCACA,0BAAMe,MAAM,kBAAZ,cACA,2BACE,yCADF,mzBCUSC,MAZf,WAEE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASU,MAAM,YAAYC,OAAO,eAAeC,OAAQ,KACzD,kBAAC,EAAD,QCDcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6d3622a.chunk.js","sourcesContent":["import React from 'react';\nimport './header.styles.css';\nexport const Header = () => (\n  <nav className=\"navbar navbar-expand-md navbar-light bg-light fix-top\">\n    <a className=\"navbar-brand\" href=\"{}\">\n      Logo\n    </a>\n    <button\n      className=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarNav\"\n      aria-controls=\"navbarNav\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse right\" id=\"navbarNav\">\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item active\">\n          <a className=\"nav-link\" href=\"{}\">\n            Home <span className=\"sr-only\">(current)</span>\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"{}\">\n            About\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"{}\">\n            Gallery\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"{}\">\n            Recipes\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"{}\">\n            Contact\n          </a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n","import React from 'react';\nimport './heading.styles.css';\nexport const Heading = ({first,second,styles}) => {\n  return (\n    <div id=\"head\" style={styles}>\n      <h1>{first}</h1>\n      <h1>{second}</h1>\n    </div>\n  );\n};\n","import React from 'react';\nimport './about.styles.css';\n\nexport const About = () => {\n  return (\n    <div id=\"about\" className=\"container\">\n      <h1>About Us</h1>\n      <span class=\"material-icons\">restaurant</span>\n      <p>\n        <b>Parambriym</b> means traditional and true to its name, the recepies\n        have been passed and tried down from generation to generation and it has\n        been used and changed to suit the present generation , keeping mind to\n        maintain the traditional methods fused with the latest technology to\n        give a very tasty traditional food which is more like veetu saapadu.\n        Parambriym is a fast emerging catering company, we have carved a niche\n        for ourselves in this competitive food industry by offering simple but\n        yet delicious food keeping mind the quality and quantity and hygiene. We\n        do not use any artificial flavors or mono-sodium glutamate. Our masala's\n        are freshly grounded. We try to preserve and enhance the original\n        flavour of the spices , hence we are able to give quality food to\n        satisfy the taste of our clients to utmost satisfaction.\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { Header } from './components/header/header.component';\nimport { Heading } from './components/heading/heading.component';\nimport {About } from './components/About/about.commponent';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Header />\n      \n      <Heading first=\"Food Fest\" second=\"Welcomes you\" styles={{}}/>\n      <About/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import $ from 'jquery';\n// import Popper from 'popper.js';\n// import 'bootstrap/dist/js/bootstrap.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}